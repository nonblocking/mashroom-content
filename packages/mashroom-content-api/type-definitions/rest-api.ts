/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/content/api/{type}": {
    get: {
      parameters: {
        path: {
          /** The content type */
          type: string;
        };
        query: {
          /** Only content that matches given filter query. The filter is a stringified MashroomContentApiFilter object (see type-definitions) */
          filter?: { [key: string]: unknown };
          /** Deliver content for given locale */
          locale?: string;
          /** Only content with some specific status */
          status?: components["schemas"]["ContentStatus"];
          /** Sort the result by given properties */
          sort?: { [key: string]: unknown };
          /** Limit the number of hits */
          limit?: string;
          /** Skip some hits (for paging) */
          skip?: string;
        };
      };
      responses: {
        /** Successfully returned a list of contents */
        200: {
          content: {
            "application/json": components["schemas"]["ContentSearchResult"];
          };
        };
        /** Invalid request */
        400: {
          content: {
            "application/json": {
              message?: string;
            };
          };
        };
      };
    };
    post: {
      parameters: {
        path: {
          /** The content type */
          type: string;
        };
      };
      responses: {
        /** Successfully created a content */
        200: {
          content: {
            "application/json": components["schemas"]["ContentWrapper"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewOrPartialContent"];
        };
      };
    };
  };
  "/content/api/{type}/searches": {
    post: {
      parameters: {
        path: {
          /** The content type */
          type: string;
        };
      };
      responses: {
        /** Successfully returned a list of contents */
        200: {
          content: {
            "application/json": components["schemas"]["ContentSearchResult"];
          };
        };
        /** Invalid request */
        400: {
          content: {
            "application/json": {
              message?: string;
            };
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ContentSearchRequest"];
        };
      };
    };
  };
  "/content/api/{type}/{id}": {
    get: {
      parameters: {
        path: {
          /** The content type */
          type: string;
          /** The content ID */
          id: string;
        };
        query: {
          /** Deliver content for given locale */
          locale?: string;
          /** Get given version */
          version?: string;
        };
      };
      responses: {
        /** Successfully returned a content */
        200: {
          content: {
            "application/json": components["schemas"]["ContentWrapper"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** The content type */
          type: string;
          /** The content ID */
          id: string;
        };
      };
      responses: {
        /** Successfully updated */
        200: {
          content: {
            "application/json": components["schemas"]["ContentWrapper"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewOrPartialContent"];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** The content type */
          type: string;
          /** The content ID */
          id: string;
        };
        query: {
          /** Delete only specific translations */
          locale?: string[];
          /** Delete only this given version */
          version?: string[];
        };
      };
      responses: {
        /** Successfully removed */
        200: unknown;
      };
    };
  };
  "/content/api/{type}/{id}/versions": {
    get: {
      parameters: {
        path: {
          /** The content type */
          type: string;
          /** The content ID */
          id: string;
        };
        query: {
          /** Deliver content for given locale */
          locale?: string;
        };
      };
      responses: {
        /** Successfully returned a content */
        200: {
          content: {
            "application/json": components["schemas"]["ContentVersionsResult"];
          };
        };
      };
    };
  };
  "/content/assets": {
    get: {
      parameters: {
        query: {
          /** The asset type (e.g. image/png or image) */
          type?: string;
          /** Search in title */
          titleContains?: string;
          /** Limit the number of hits */
          limit?: string;
          /** Skip some hits (for paging) */
          skip?: string;
        };
      };
      responses: {
        /** Successfully returned a list of assets */
        200: {
          content: {
            "application/json": components["schemas"]["AssetSearchResult"];
          };
        };
        /** Invalid request */
        400: {
          content: {
            "application/json": {
              message?: string;
            };
          };
        };
      };
    };
    post: {
      responses: {
        /** Successfully uploaded */
        200: {
          content: {
            "application/json": components["schemas"]["Asset"];
          };
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": components["schemas"]["AssetUpload"];
        };
      };
    };
  };
  "/content/assets/{id}": {
    delete: {
      parameters: {
        path: {
          /** The asset id */
          id: string;
        };
      };
      responses: {
        /** Successfully deleted */
        200: unknown;
        /** Asset not found */
        404: unknown;
      };
    };
  };
  "/content/assets/{proxyName}/{assetPath}": {
    get: {
      parameters: {
        query: {
          /** Resize to given with (only if asset processing enabled) */
          _w?: string;
          /** Convert image to given format (only if asset processing enabled) */
          _format?: components["schemas"]["AssetImageFormats"];
          /** Convert with given quality in percent (only if asset processing enabled) */
          _q?: string;
          /** The format can also be given as extension, in that case you have to pass the source format here (only if asset processing enabled) */
          _sourceFormat?: components["schemas"]["AssetImageFormats"];
        };
      };
      responses: {
        /** The asset content */
        200: {
          content: {
            "*/*": string;
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    ContentSearchRequest: {
      filter?: { [key: string]: unknown };
      locale?: string;
      status?: components["schemas"]["ContentStatus"];
      sort?: { [key: string]: unknown };
      limit?: number;
      skip?: number;
    };
    SearchResultMeta: {
      total: number;
    };
    ContentSearchResult: {
      hits: components["schemas"]["ContentWrapper"][];
      meta: components["schemas"]["SearchResultMeta"];
    };
    Content: { [key: string]: unknown };
    ContentStatus: "published" | "draft";
    ContentMeta: {
      locale?: string;
      availableLocales?: string[];
      version?: string;
      status?: components["schemas"]["ContentStatus"];
    };
    ContentWrapper: {
      id: string;
      data: components["schemas"]["Content"];
      meta: components["schemas"]["ContentMeta"];
    };
    NewOrPartialContent: {
      data: { [key: string]: unknown };
      meta?: {
        locale?: string;
        status?: components["schemas"]["ContentStatus"];
      };
    };
    ContentVersionsResult: {
      versions: components["schemas"]["ContentWrapper"][];
    };
    AssetImageFormats: "png" | "jpeg" | "jpg" | "webp" | "avif";
    AssetUpload: {
      /** Format: binary */
      file: string;
      /** @description Optional upload path (may be ignored) */
      path?: string;
      contentRefType?: string;
      contentRefId?: string;
      contentRefFieldName?: string;
      contentRefLocale?: string;
    };
    AssetSearchResult: {
      hits: components["schemas"]["Asset"][];
      meta: components["schemas"]["SearchResultMeta"];
    };
    Asset: {
      id: string;
      url: string;
      meta: components["schemas"]["AssetMeta"];
    };
    AssetMeta: {
      title: string;
      fileName: string;
      mimeType: string;
      width?: number;
      height?: number;
    };
  };
}

export interface operations {}

export interface external {}
